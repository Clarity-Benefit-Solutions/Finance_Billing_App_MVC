@using Microsoft.AspNetCore.Http
@using FinanceBillingModel.Models
@model UploadFile
@*@model FinanceBilling.Models.TblLoggingViewModel*@
@{
	ViewBag.Title = "Upload Files";
	List<UploadFileErrorModel> uploadFileErrorsList = new List<UploadFileErrorModel>();
	if (Model != null)
	{
		uploadFileErrorsList = Model.UploadFileErrorModels;
	}
	//UploadFileErrorModel uploadFileErrors = ViewBag.uploadFileErrorModel;
}
			
<div class="row" style="border:1px solid green;">
	<div class="col-md-5">
		<div class="card text-center">
			<div class="card-header">
				Upload Files
			</div>
			<div class="card-body text-center">
				<form method="post" enctype="multipart/form-data" asp-controller="UploadFile" asp-action="UploadFile">
					<div class="form-group">
						<div class="col-md-10">
							<!--<div class="drop-zone d-flex justify-content-center align-items-center">-->
							@*<img id="Logo" src="@logoImage" style="max-height:100%;max-width:100%;align-content:center;" />*@
							<!--<span class="drop-zone-prompt">Drag and drop , Browse</span>-->
							@*<div style="visibility:hidden;">*@
							<!--<input asp-for="UploadedFiles" type="file" id="file" class="drop-zone-input" onchange="readURL(this);" multiple />-->
							@*</div>*@
							<!--</div>-->
							<input type="file" asp-for="UploadedFiles" id="file" onchange="readURL(this);" multiple />
							@*<input asp-for="UploadedFiles" multiple />*@
						</div>
					</div>
					<div class="form-group">
						<div class="col-md-10">
							<input class="btn btn-success" id="Upload" type="submit" disabled value="Upload" onclick="return UploadeFiles()" /><br />
							<label id="msglabel" type="hidden">@ViewBag.Message</label>

						</div>
						<div class="progress">
							<div id="pb" class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
								0%
							</div>
						</div>
					</div>
				</form>
			</div>
			<div class="card-footer text-muted">

			</div>
		</div>


	</div>

	@if (ViewBag.missingFile != null) {
		<div class="col-md-5">
			@Html.ValidationSummary(false, "", new { @class = "text-danger" })

			<div class="col-sm=12" style="padding-top: 11em; margin-left: 29px;">
				<span class="alert-heading"><b>Please upload missing files:-</b></span>
			</div>
			<div class="col-sm-12">
				<ul class="text-danger">
					@foreach (var modelSate in ViewBag.missingFile) {
						<li>@modelSate.FileName</li>

					}
				</ul>
			</div>
		</div>
	} else {
		<div class="col-md-5">
			@Html.ValidationSummary(false, "", new { @class = "text-danger" })
		</div>
	}
</div>
<hr />
<!--display error by guid-->
<div class="accordion" id="ErrorFileDisplay" style="width:100%;margin-top:17px;">
	@if (Model.UploadFileErrorModels != null) {
		<span style="font-weight: bolder; font-size: 21px; color: #2d5592; ">
			Display Error:
		</span>
		@foreach (var item in Model.ErrorFileNameLists) {

			<div class="card-header" id="heading_@item.ID">
				<h2 class="mb-0">
					<button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapse_@item.ID" aria-expanded="true" aria-controls="collapse_@item.ID">
						@item.PackageName;
					</button>
				</h2>
			</div>
		}

		@foreach(UploadFileErrorModel uploadFileErrors in uploadFileErrorsList) {
			@if (uploadFileErrors != null) {
				if (uploadFileErrors.BrokerClientListErrorsList != null) {
<div class="card" style="margin-top: 10px;">
	<div id="Collapse_@uploadFileErrors.BrokerClientListErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse show" aria-labelledby="heading_@uploadFileErrors.BrokerClientListErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
		<div class="card-body" id="accordion-table">
			<table class="table table-striped">
				<tr>
					<th>Error Code</th>
					<th>Error Column</th>
					<th>LoggingDbId</th>
					<th>Description</th>
					<th>Broker ID</th>
					<th>Broker Name</th>
					<th>Client ID</th>
					<th>Client Name</th>
					<th>Active</th>
				</tr>

				@foreach (var item in uploadFileErrors.BrokerClientListErrorsList.ToList()) {

					<tr>
						<td>@item.ErrorCode</td>
						<td>@item.ErrorColumn</td>
						<td>@item.LoggingDbId</td>
						<td>@item.Description</td>
						<td>@item.BrokerID</td>
						<td>@item.BrokerName</td>
						<td>@item.ClientID</td>
						<td>@item.ClientName</td>
						<td>@item.Active</td>

					</tr>
				}

			</table>
		</div>
	</div>
</div>

				}
			}
			@if (uploadFileErrors != null) {
				@if (uploadFileErrors.ClientListErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingTwo">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
									Client Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.ClientListErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.ClientListErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Client Name</th>
										<th>Client Group Name</th>
										<th>Client Division Name</th>
										<th>Client ID</th>
										<th>Client Division ID</th>
										<th>Active</th>

									</tr>

									@foreach (var item in uploadFileErrors.ClientListErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.ClientName</td>
											<td>@item.ClientGroupName</td>
											<td>@item.ClientDivisionName</td>
											<td>@item.ClientID</td>
											<td>@item.ClientDivisionID</td>
											<td>@item.Active</td>

										</tr>
									}
								</table>
							</div>
						</div>
					</div>
				}
			}

			@if (uploadFileErrors != null) {
				if (uploadFileErrors.CobraLettersErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingThree">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
									Cobra Letters Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.CobraLettersErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.CobraLettersErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Client Name</th>
										<th>Division Name</th>
										<th>Mode Order</th>
										<th>Mode Name</th>
										<th>Qty</th>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
									</tr>


									@foreach (var item in uploadFileErrors.CobraLettersErrorsList.ToList()) {

										<tr>
											<td>@item.ClientName</td>
											<td>@item.DivisionName</td>
											<td>@item.ModeOrder</td>
											<td>@item.ModeName</td>
											<td>@item.Qty</td>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
										</tr>
									}

								</table>
							</div>
						</div>
					</div>
				}
			}
			@if (uploadFileErrors != null) {
				@if (uploadFileErrors.DebitCardSummeryErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingFour">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
									Debit CardSummery Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.DebitCardSummeryErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.DebitCardSummeryErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>AdminId</th>
										<th>AdminName</th>
										<th>EmployerId</th>
										<th>EmployerName</th>
										<th>NewCardCount</th>
										<th>ReplacementCardCount</th>
										<th>TotalCardsCount</th>

									</tr>


									@foreach (var item in uploadFileErrors.DebitCardSummeryErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.AdminId</td>
											<td>@item.AdminName</td>
											<td>@item.EmployerId</td>
											<td>@item.EmployerName</td>
											<td>@item.NewCardCount</td>
											<td>@item.ReplacementCardCount</td>
											<td>@item.TotalCardsCount</td>

										</tr>
									}

								</table>
							</div>
						</div>
					</div>
				}
			}

			@if (uploadFileErrors != null) {
				if (uploadFileErrors.EbExtractErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingFive">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
									Eb Extract Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.EbExtractErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.EbExtractErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Termination Date</th>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Record Type</th>
										<th>Tpa Id</th>
										<th>Employer Id</th>
										<th>Division</th>
										<th>Employee Id</th>
										<th>Employee Social Security Number</th>
										<th>First Name</th>
										<th>Last Name</th>
										<th>AddressLine1</th>
										<th>AddressLine2</th>
										<th>City</th>
										<th>State</th>
										<th>Zip</th>
										<th>Country</th>
										<th>User Defined Field</th>
										<th>Employee Status</th>
										<th>Termination Date</th>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
									</tr>
									@foreach (var item in uploadFileErrors.EbExtractErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.RecordType</td>
											<td>@item.TpaId</td>
											<td>@item.EmployerId</td>
											<td>@item.Division</td>
											<td>@item.EmployeeId</td>
											<td>@item.EmployeeSocialSecurityNumber</td>
											<td>@item.FirstName</td>
											<td>@item.LastName</td>
											<td>@item.AddressLine1</td>
											<td>@item.AddressLine2</td>
											<td>@item.City</td>
											<td>@item.State</td>
											<td>@item.Zip</td>
											<td>@item.Country</td>
											<td>@item.UserDefinedField</td>
											<td>@item.EmployeeStatus</td>
											<td>@item.TerminationDate</td>

										</tr>
									}
								</table>
							</div>
						</div>
					</div>
				}
			}
			@if (uploadFileErrors != null) {
				if (uploadFileErrors.EcExtractErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingsix">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapsesix" aria-expanded="false" aria-controls="collapsesix">
									Ec Extract Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.EcExtractErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.EcExtractErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Record Type</th>
										<th>Tpa Id</th>
										<th>Employer Id</th>
										<th>Dependent Id</th>
										<th>Employee Id</th>
										<th>Employee Social Security Number</th>
										<th>Plan Start Date</th>
										<th>Plan End Date</th>
										<th>Effective Date</th>
										<th>Termination Date</th>
										<th>Account Status</th>
										<th>Employee Status</th>
										<th>Employee LastName</th>
										<th>Employee First Name</th>
										<th>Current Annual Election</th>
										<th>Original Prefunded Annual Election Amount</th>
										<th>Individual Amount</th>
										<th>Employee Annual Election</th>
										<th>Employee Pay Period Election</th>
										<th>Employer Annual Election</th>
										<th>Employer Pay Period Election</th>
										<th>Employee Contribution Ytd</th>
										<th>Employer Contribution Ytd</th>
										<th>Other Deposits</th>
										<th>Disbursements Ptd</th>
										<th>Disbursable Balance</th>
										<th>Available Balance</th>
										<th>Auto Reimbursement Setting</th>
										<th>Start AutoDeposit Date</th>
										<th>Auto Deposit Calendar Id</th>
										<th>Card Number</th>
										<th>Coverage Tier Id</th>
										<th>Employee Address1</th>
										<th>Employee Address2</th>
										<th>Employee City</th>
										<th>Employee State</th>
										<th>Employee Zip</th>
										<th>Employee Phone</th>
										<th>Employee Email Address</th>
										<th>Employee Birth Date</th>
										<th>Product Partner Acct Status</th>
										<th>Product Partner Acct Close Date</th>
										<th>Unique Key Accounts</th>
										<th>Billable Account</th>
										<th>Unique Key Perpay</th>
										<th>EbTerm Date</th>
										<th>EbTerm Status</th>

									</tr>
									@foreach (var item in uploadFileErrors.EcExtractErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.RecordType</td>
											<td>@item.TpaId</td>
											<td>@item.EmployerId</td>
											<td>@item.DependentId</td>
											<td>@item.EmployeeId</td>
											<td>@item.EmployeeSocialSecurityNumber</td>
											<td>@item.PlanStartDate</td>
											<td>@item.PlanEndDate</td>
											<td>@item.EffectiveDate</td>
											<td>@item.TerminationDate</td>
											<td>@item.AccountStatus</td>
											<td>@item.EmployeeStatus</td>
											<td>@item.EmployeeLastName</td>
											<td>@item.EmployeeFirstName</td>
											<td>@item.CurrentAnnualElection</td>
											<td>@item.OriginalPrefundedAnnualElectionAmount</td>
											<td>@item.IndividualAmount</td>
											<td>@item.EmployeeAnnualElection</td>
											<td>@item.EmployeePayPeriodElection</td>
											<td>@item.EmployeeContributionYtd</td>
											<td>@item.EmployerContributionYtd</td>
											<td>@item.OtherDeposits</td>
											<td>@item.DisbursementsPtd</td>
											<td>@item.DisbursableBalance</td>
											<td>@item.AvailableBalance</td>
											<td>@item.AutoReimbursementSetting</td>
											<td>@item.StartAutoDepositDate</td>
											<td>@item.AutoDepositCalendarId</td>
											<td>@item.CardNumber</td>
											<td>@item.CoverageTierId</td>
											<td>@item.EmployeeAddress1</td>
											<td>@item.EmployeeAddress2</td>
											<td>@item.EmployeeCity</td>
											<td>@item.EmployeeState</td>
											<td>@item.EmployeeZip</td>
											<td>@item.EmployeePhone</td>
											<td>@item.EmployeeEmailAddress</td>
											<td>@item.EmployeeBirthDate</td>
											<td>@item.ProductPartnerAcctStatus</td>
											<td>@item.ProductPartnerAcctCloseDate</td>
											<td>@item.UniqueKeyAccounts</td>
											<td>@item.BillableAccount</td>
											<td>@item.UniqueKeyPerpay</td>
											<td>@item.EbTermDate</td>
											<td>@item.EbTermStatus</td>

										</tr>
									}
								</table>
							</div>
						</div>
					</div>
				}
			}
			@if (uploadFileErrors != null) {
				@if (uploadFileErrors.EmployeeNavImportErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingseven">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseSeven" aria-expanded="false" aria-controls="collapseSeven">
									Employee Nav Import Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.EmployeeNavImportErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.EmployeeNavImportErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Company</th>
										<th>TotalEmployees</th>
										<th>ActiveEmployees</th>
										<th>EligibleEmployees</th>
										<th>EnrolledEmployees</th>
										<th>CobraEmployees</th>
										<th>SsmaTimeStamp</th>

									</tr>


									@foreach (var item in uploadFileErrors.EmployeeNavImportErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.Company</td>
											<td>@item.TotalEmployees</td>
											<td>@item.ActiveEmployees</td>
											<td>@item.EligibleEmployees</td>
											<td>@item.EnrolledEmployees</td>
											<td>@item.CobraEmployees</td>
											<td>@item.SsmaTimeStamp</td>

										</tr>
									}

								</table>
							</div>
						</div>
					</div>
				}
			}
			@if (uploadFileErrors != null) {
				if (uploadFileErrors.PlanDocReportErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingEight">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseEight" aria-expanded="false" aria-controls="collapseEight">
									Plan DocReport Errors List
								</button>
							</h2>
						</div>*@
						@{
								var id = uploadFileErrors.PlanDocReportErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();
						}
						<div id="Collapse_@id" class="collapse" aria-labelledby="heading_@uploadFileErrors.PlanDocReportErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Line Type</th>
										<th>Tpa Code</th>
										<th>Bencode</th>
										<th>Employer Name</th>
										<th>Account Type Code</th>
										<th>Plan Id</th>
										<th>Py Start Date</th>
										<th>Plan End Date</th>
										<th>Grace Roll</th>
										<th>Runout Date</th>
										<th>Term Runout Date</th>
										<th>Plan Min</th>
										<th>Plan Max</th>
										<th>Runout Date Dt</th>
										<th>Billable Runout</th>
										<th>Account Unique Key</th>
										<th>Term Runout Date Number</th>
										<th>Plan End Date Dt</th>
										<th>Runout Date Number</th>
										<th>Error RowNo</th>

									</tr>
									@foreach (var item in uploadFileErrors.PlanDocReportErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.LineType</td>
											<td>@item.TpaCode</td>
											<td>@item.Bencode</td>
											<td>@item.EmployerName</td>
											<td>@item.AccountTypeCode</td>
											<td>@item.PlanId</td>
											<td>@item.PyStartDate</td>
											<td>@item.PlanEndDate</td>
											<td>@item.GraceRoll</td>
											<td>@item.RunoutDate</td>
											<td>@item.TermRunoutDate</td>
											<td>@item.PlanMin</td>
											<td>@item.PlanMax</td>
											<td>@item.RunoutDateDt</td>
											<td>@item.BillableRunout</td>
											<td>@item.AccountUniqueKey</td>
											<td>@item.TermRunoutDateNumber</td>
											<td>@item.PlanEndDateDt</td>
											<td>@item.RunoutDateNumber</td>
											<td>@item.ErrorRowNo</td>

										</tr>
									}
								</table>
							</div>
						</div>
					</div>
				}
			}
			@if (uploadFileErrors != null) {
				@if (uploadFileErrors.EmployeeNavImportErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingNine">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapsenine" aria-expanded="false" aria-controls="collapsenine">
									Employee Nav Import Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.EmployeeNavImportErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.EmployeeNavImportErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Company</th>
										<th>TotalEmployees</th>
										<th>ActiveEmployees</th>
										<th>EligibleEmployees</th>
										<th>EnrolledEmployees</th>
										<th>CobraEmployees</th>
										<th>SsmaTimeStamp</th>

									</tr>


									@foreach (var item in uploadFileErrors.EmployeeNavImportErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.Company</td>
											<td>@item.TotalEmployees</td>
											<td>@item.ActiveEmployees</td>
											<td>@item.EligibleEmployees</td>
											<td>@item.EnrolledEmployees</td>
											<td>@item.CobraEmployees</td>
											<td>@item.SsmaTimeStamp</td>

										</tr>
									}

								</table>
							</div>
						</div>
					</div>
				}
			}
			@if (uploadFileErrors != null) {
				@if (uploadFileErrors.PlanDocReportPriorErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingTen">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseTen" aria-expanded="false" aria-controls="collapseTen">
									Plan Doc Report Prior Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.PlanDocReportPriorErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.PlanDocReportPriorErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Line Type</th>
										<th>Tpa Code</th>
										<th>Bencode</th>
										<th>Employer Name</th>
										<th>Account Type Code</th>
										<th>Plan Id</th>
										<th>Py Start Date</th>
										<th>Plan End Date</th>
										<th>Grace Roll</th>
										<th>Runout Date</th>
										<th>Term Runout Date</th>
										<th>Plan Min</th>
										<th>Plan Max</th>
										<th>Runout Date Dt</th>
										<th>Billable Runout</th>
										<th>Account Unique Key</th>
										<th>Term Runout Date Number</th>
										<th>Plan End Date Dt</th>
										<th>Runout Date Number</th>
										<th>Error RowNo</th>

									</tr>



									@foreach (var item in uploadFileErrors.PlanDocReportPriorErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.LineType</td>
											<td>@item.TpaCode</td>
											<td>@item.Bencode</td>
											<td>@item.EmployerName</td>
											<td>@item.AccountTypeCode</td>
											<td>@item.PlanId</td>
											<td>@item.PyStartDate</td>
											<td>@item.PlanEndDate</td>
											<td>@item.GraceRoll</td>
											<td>@item.RunoutDate</td>
											<td>@item.TermRunoutDate</td>
											<td>@item.PlanMin</td>
											<td>@item.PlanMax</td>
											<td>@item.RunoutDateDt</td>
											<td>@item.BillableRunout</td>
											<td>@item.AccountUniqueKey</td>
											<td>@item.TermRunoutDateNumber</td>
											<td>@item.PlanEndDateDt</td>
											<td>@item.RunoutDateNumber</td>
											<td>@item.ErrorRowNo</td>

										</tr>
									}
								</table>
							</div>
						</div>
					</div>
				}
			}

			@if (uploadFileErrors != null) {
				if (uploadFileErrors.SpabyacareportErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingeleven">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseeleven" aria-expanded="false" aria-controls="collapseeleven">
									Spabya careport Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.SpabyacareportErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.SpabyacareportErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Member Id</th>
										<th>Client Name</th>
										<th>Division Name</th>
										<th>First Name</th>
										<th>Last Name</th>
										<th>Middle Initial</th>
										<th>Dob</th>
										<th>Ssn</th>
										<th>Individual Identifier</th>
										<th>Gender</th>
										<th>Address</th>
										<th>Address2</th>
										<th>City</th>
										<th>Country</th>
										<th>Postal Code</th>
										<th>State Or Province</th>
										<th>Ein</th>
										<th>Plan Name</th>
										<th>Plan Star tDate</th>
										<th>Plan End Date</th>
										<th>Tobacco Use</th>
										<th>Carrier Name</th>
										<th>Insurance Type</th>
										<th>Coverage Level Type</th>
										<th>Employee Type</th>
										<th>RelationShip Name</th>
										<th>Spminsurance Type PlanId</th>
										<th>IsDependent</th>
										<th>Billing Type Name</th>
										<th>Status</th>
										<th>First Day Of Coverage</th>
										<th>Last Day Of Coverage</th>
										<th>Term Date</th>
										<th>My Property</th>
										<th>Account Type Code</th>
										<th>Client Alternate</th>
										<th>Unique Key</th>

									</tr>

									@foreach (var item in uploadFileErrors.SpabyacareportErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.MemberId</td>
											<td>@item.ClientName</td>
											<td>@item.DivisionName</td>
											<td>@item.FirstName</td>
											<td>@item.LastName</td>
											<td>@item.MiddleInitial</td>
											<td>@item.Dob</td>
											<td>@item.Ssn</td>
											<td>@item.IndividualIdentifier</td>
											<td>@item.Gender</td>
											<td>@item.Address</td>
											<td>@item.Address2</td>
											<td>@item.City</td>
											<td>@item.Country</td>
											<td>@item.PostalCode</td>
											<td>@item.StateOrProvince</td>
											<td>@item.Ein</td>
											<td>@item.PlanName</td>
											<td>@item.PlanStartDate</td>
											<td>@item.PlanEndDate</td>
											<td>@item.TobaccoUse</td>
											<td>@item.CarrierName</td>
											<td>@item.InsuranceType</td>
											<td>@item.CoverageLevelType</td>
											<td>@item.EmployeeType</td>
											<td>@item.RelationShipName</td>
											<td>@item.SpminsuranceTypePlanId</td>
											<td>@item.IsDependent</td>
											<td>@item.BillingTypeName</td>
											<td>@item.Status</td>
											<td>@item.FirstDayOfCoverage</td>
											<td>@item.LastDayOfCoverage</td>
											<td>@item.TermDate</td>
											<td>@item.MyProperty</td>
											<td>@item.AccountTypeCode</td>
											<td>@item.ClientAlternate</td>
											<td>@item.UniqueKey</td>

										</tr>
									}

								</table>
							</div>
						</div>
					</div>
				}
			}
			@if (uploadFileErrors != null) {
				@if (uploadFileErrors.StaggingNpmErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingTwelve">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseTwelve" aria-expanded="false" aria-controls="collapseTwelve">
									Stagging Npm Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.StaggingNpmErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.StaggingNpmErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Client Name</th>
										<th>include</th>
										<th>Division Name</th>
										<th>Full Name</th>
										<th>SSN</th>
										<th>Coverage Level</th>
										<th>Address</th>
										<th>Address2</th>
										<th>City</th>
										<th>State Or Province</th>
										<th>Postal Code</th>
										<th>Country</th>
										<th>PDF Generated DateTime</th>
										<th>Individual Identifier</th>
										<th>Type</th>
										<th>Member ID</th>
										<th>IsPaylocity</th>
										<th>Alternate ERID</th>

									</tr>


									@foreach (var item in uploadFileErrors.StaggingNpmErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.ClientName</td>
											<td>@item.include</td>
											<td>@item.DivisionName</td>
											<td>@item.FullName</td>
											<td>@item.SSN</td>
											<td>@item.CoverageLevel</td>
											<td>@item.Address</td>
											<td>@item.Address2</td>
											<td>@item.City</td>
											<td>@item.StateOrProvince</td>
											<td>@item.PostalCode</td>
											<td>@item.Country</td>
											<td>@item.PDFGeneratedDateTime</td>
											<td>@item.IndividualIdentifier</td>
											<td>@item.Type</td>
											<td>@item.MemberID</td>
											<td>@item.IsPaylocity</td>
											<td>@item.AlternateERID</td>


										</tr>
									}

								</table>
							</div>
						</div>
					</div>
				}
			}
			@if (uploadFileErrors != null) {
				@if (uploadFileErrors.StaggingQbDetailErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingThirteen">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseThirteen" aria-expanded="false" aria-controls="collapseThirteen">
									Stagging QbDetail Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.StaggingQbDetailErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.StaggingQbDetailErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Member Id</th>
										<th>Client Name</th>
										<th>Division Name</th>
										<th>First Name</th>
										<th>Last Name</th>
										<th>Middle Initial</th>
										<th>Dob</th>
										<th>Ssn</th>
										<th>Individual Identifier</th>
										<th>Gender</th>
										<th>Address</th>
										<th>Address2</th>
										<th>City</th>
										<th>Country</th>
										<th>Postal Code</th>
										<th>State Or Province</th>
										<th>Ein</th>
										<th>Plan Name</th>
										<th>Plan Start Date</th>
										<th>Plan End Date</th>
										<th>Tobacco Use</th>
										<th>Carrier Name</th>
										<th>Insurance Type</th>
										<th>Coverage Level Type</th>
										<th>Employee Type</th>
										<th>RelationShip Name</th>

										<th>IsDependent</th>
										<th>Specific Rights Processed Date</th>
										<th>Event Type</th>
										<th>Event Category</th>
										<th>Qualifying Event Date</th>
										<th>Uses Health Coverage Tax Credit</th>
										<th>Status</th>
										<th>First Day Of COBRA</th>
										<th>Last Day Of COBRA</th>
										<th>Term Date</th>
										<th>Alternate ERID</th>


									</tr>


									@foreach (var item in uploadFileErrors.StaggingQbDetailErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.MemberID</td>
											<td>@item.ClientName</td>
											<td>@item.DivisionName</td>
											<td>@item.FirstName</td>
											<td>@item.LastName</td>
											<td>@item.MiddleInitial</td>
											<td>@item.DOB</td>
											<td>@item.SSN</td>
											<td>@item.IndividualIdentifier</td>
											<td>@item.Gender</td>
											<td>@item.Address</td>
											<td>@item.Address2</td>
											<td>@item.City</td>
											<td>@item.Country</td>
											<td>@item.PostalCode</td>
											<td>@item.StateOrProvince</td>
											<td>@item.EIN</td>
											<td>@item.PlanName</td>
											<td>@item.PlanStartDate</td>
											<td>@item.PlanEndDate</td>
											<td>@item.TobaccoUse</td>
											<td>@item.CarrierName</td>
											<td>@item.InsuranceType</td>
											<td>@item.CoverageLevelType</td>
											<td>@item.EmployeeType</td>
											<td>@item.RelationShipName</td>

											<td>@item.IsDependent</td>
											<td>@item.SpecificRightsProcessedDate</td>
											<td>@item.EventType</td>
											<td>@item.EventCategory</td>
											<td>@item.QualifyingEventDate</td>
											<td>@item.UsesHealthCoverageTaxCredit</td>
											<td>@item.Status</td>
											<td>@item.FirstDayOfCOBRA</td>
											<td>@item.LastDayOfCOBRA</td>
											<td>@item.TermDate</td>
											<td>@item.AlternateERID</td>

										</tr>
									}
								</table>
							</div>
						</div>
					</div>
				}
			}
			@if (uploadFileErrors != null) {
				@if (uploadFileErrors.SwiftBillingNumImportErrorsList != null) {
					<div class="card">
						@*<div class="card-header" id="headingThirteen">
							<h2 class="mb-0">
								<button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseThirteen" aria-expanded="false" aria-controls="collapseThirteen">
									SwiftBilling NumImport Errors List
								</button>
							</h2>
						</div>*@
						<div id="Collapse_@uploadFileErrors.SwiftBillingNumImportErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" class="collapse" aria-labelledby="heading_@uploadFileErrors.SwiftBillingNumImportErrorsList.Select(x => x.LoggingDbId).FirstOrDefault();" data-parent="#ErrorFileDisplay">
							<div class="card-body" id="accordion-table">
								<table class="table table-striped">
									<tr>
										<th>Error Code</th>
										<th>Error Column</th>
										<th>LoggingDbId</th>
										<th>Description</th>
										<th>Group Number</th>
										<th>Client Name</th>
										<th>Client Effective Date</th>
										<th>Division</th>
										<th>Location</th>
										<th>Employee Id</th>
										<th>First Name</th>
										<th>Last Name</th>
										<th>Benefit Class Name</th>
										<th>Benefit Class Benefit Eligible</th>
										<th>ParticipantUniqueKey</th>


									</tr>


									@foreach (var item in uploadFileErrors.SwiftBillingNumImportErrorsList.ToList()) {

										<tr>
											<td>@item.ErrorCode</td>
											<td>@item.ErrorColumn</td>
											<td>@item.LoggingDbId</td>
											<td>@item.Description</td>
											<td>@item.GroupNumber</td>
											<td>@item.ClientName</td>
											<td>@item.ClientEffectiveDate</td>
											<td>@item.Division</td>
											<td>@item.Location</td>
											<td>@item.EmployeeId</td>
											<td>@item.FirstName</td>
											<td>@item.LastName</td>
											<td>@item.BenefitClassName</td>
											<td>@item.BenefitClassBenefitEligible</td>
											<td>@item.ParticipantUniqueKey</td>

										</tr>
									}


								</table>
							</div>
						</div>
					</div>
				}
			}


		}


	}
</div>




<!-- Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			<div class="modal-header">
				<ul class="nav nav-tabs" id="myTab" role="tablist">
					<li class="nav-item" role="presentation">
						<button class="nav-link active " id="new-tab" data-bs-toggle="tab" data-bs-target="#new" type="button" role="tab" aria-controls="new" aria-selected="true">New</button>
					</li>
					<li class="nav-item" role="presentation">
						<button class="nav-link" id="existing-tab" data-bs-toggle="tab" data-bs-target="#existing" type="button" role="tab" aria-controls="existing" aria-selected="false">Existing</button>
					</li>
					<li class="nav-item" role="presentation">
						<button class="nav-link" id="terminated-tab" data-bs-toggle="tab" data-bs-target="#terminated" type="button" role="tab" aria-controls="terminated" aria-selected="false">Terminated</button>
					</li>
					<li class="nav-item" role="analytics">
						<button class="nav-link" id="analytics-tab" data-bs-toggle="tab" data-bs-target="#analytics" type="button" role="tab" aria-controls="analytics" aria-selected="false">Analytics</button>
					</li>
				</ul>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<div class="tab-content" id="myTabContent" style="width:100%;">
					<div class="tab-pane fade show active" id="new" role="tabpanel" aria-labelledby="new-tab" style="overflow:auto; width:100%;">

						@(Html.DevExtreme().DataGrid<FinanceBilling.Models.NewClientViewModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Client")
        //.Key("ClientID")
        .LoadAction("NewClient")
    //.InsertAction("AddNewQuickBookClient")
    //.UpdateAction("UpdateQuickBookClient")
    //.DeleteAction("DeleteQuickBookClient")
    )
    .RemoteOperations(true)
    .Columns(columns => {


        columns.AddFor(m => m.ClientName);

        columns.AddFor(m => m.ClientGroupName);

        columns.AddFor(m => m.BillingStartDate);

        columns.AddFor(m => m.EIN);
        columns.AddFor(m => m.ClientDivisionName);
        columns.AddFor(m => m.ClientID);

        columns.AddFor(m => m.ClientDivisionID);

        columns.AddFor(m => m.Active);

        columns.AddFor(m => m.ClientAlternate);
        columns.AddFor(m => m.DeactivationDate);

        columns.AddFor(m => m.TPACode);

        columns.AddFor(m => m.Linetype);

        columns.AddFor(m => m.AccountTypeCode);
        columns.AddFor(m => m.DivisionName);
        columns.AddFor(m => m.PlanID);

    })
    .Editing(e => e
        .AllowAdding(false)
        .AllowUpdating(false)
        .AllowDeleting(false)
    )
)

					</div>

					<div class="tab-pane fade" id="existing" role="tabpanel" aria-labelledby="existing-tab" style="overflow:auto; width:100%;">

						@(Html.DevExtreme().DataGrid<FinanceBilling.Models.NewClientViewModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Client")
        .LoadAction("ExistingClient")
    )
    .RemoteOperations(true)
    .Columns(columns => {


        columns.AddFor(m => m.ClientName);

        columns.AddFor(m => m.ClientGroupName);

        columns.AddFor(m => m.BillingStartDate);

        columns.AddFor(m => m.EIN);
        columns.AddFor(m => m.ClientDivisionName);
        columns.AddFor(m => m.ClientID);

        columns.AddFor(m => m.ClientDivisionID);

        columns.AddFor(m => m.Active);

        columns.AddFor(m => m.ClientAlternate);
        columns.AddFor(m => m.DeactivationDate);

        columns.AddFor(m => m.TPACode);

        columns.AddFor(m => m.Linetype);

        columns.AddFor(m => m.AccountTypeCode);
        columns.AddFor(m => m.DivisionName);
        columns.AddFor(m => m.PlanID);

    })
    .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        //.HeaderFilter(f => f.Visible(true))
        //.GroupPanel(p => p.Visible(true))
        //.Grouping(g => g.AutoExpandAll(false))
        //.RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.ClientName).SummaryType(SummaryType.Count);
        })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    //.Editing(e => e
    //    .AllowAdding(false)
    //    .AllowUpdating(false)
    //    .AllowDeleting(false)


    //

    )
)
					</div>
					<div class="tab-pane fade" id="terminated" role="tabpanel" aria-labelledby="terminated-tab" style="overflow:auto; width:100%;">

						@(Html.DevExtreme().DataGrid<FinanceBilling.Models.TerminatedClient>()
    .DataSource(ds => ds.Mvc()
        .Controller("Client")
        .LoadAction("TerminatedClient")
    )
    .RemoteOperations(true)
    .Columns(columns => {


        columns.AddFor(m => m.ClientName);

        columns.AddFor(m => m.ClientGroupName);

        columns.AddFor(m => m.BillingStartDate);

        columns.AddFor(m => m.EIN);
        columns.AddFor(m => m.ClientDivisionName);
        columns.AddFor(m => m.ClientID);

        columns.AddFor(m => m.ClientDivisionID);

        columns.AddFor(m => m.Active);

        columns.AddFor(m => m.ClientAlternate);
        columns.AddFor(m => m.DeactivationDate);

        columns.AddFor(m => m.TPACode);

        columns.AddFor(m => m.Linetype);

        columns.AddFor(m => m.AccountTypeCode);
        columns.AddFor(m => m.MyProperty);
        columns.AddFor(m => m.PlanID);

    })
    .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        //.HeaderFilter(f => f.Visible(true))
        //.GroupPanel(p => p.Visible(true))
        //.Grouping(g => g.AutoExpandAll(false))
        //.RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.ClientName).SummaryType(SummaryType.Count);
        })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    //.Editing(e => e
    //    .AllowAdding(false)
    //    .AllowUpdating(false)
    //    .AllowDeleting(false)


    //

    )
)
					</div>

					<div class="tab-pane fade" id="analytics" role="tabpanel" aria-labelledby="analytics-tab" style="overflow:auto; width:100%;">
						<div class="container" style="overflow:auto; width:100%;float:left;">
							<div class="col-md-6" style="overflow:auto; width:100% ;float:left;">
								<h4 class="form-inline">Client To Product Comaprison</h4>

								@(Html.DevExtreme().DataGrid<FinanceBilling.Models.ClientToProductViewModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Analytics")
        .LoadAction("GetListClientProductComparison")
    )
    .RemoteOperations(true)
    .Columns(columns => {


        columns.AddFor(m => m.SourceFileBencode);

        columns.AddFor(m => m.SourceFileClientName);

        columns.AddFor(m => m.SourceFileProducts);

        columns.AddFor(m => m.BillingAppBenCode);
        columns.AddFor(m => m.BillingAppClientName);
        columns.AddFor(m => m.StartBillingDate);

        columns.AddFor(m => m.EndBillingDate);

        columns.AddFor(m => m.iNotExistInBillingAppTable);


    })
    .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.SourceFileBencode).SummaryType(SummaryType.Count);
        })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)
							</div>
							<div class="col-md-6" style="overflow:auto; width:100%;float:left;">
								<h4 class="form-inline">Client To Client Comparison</h4>

								@(Html.DevExtreme().DataGrid<FinanceBilling.Models.ClientToClientViewModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Analytics")
        .LoadAction("GetListClientToClientComparison")
    )
    .RemoteOperations(true)
    .Columns(columns => {


        columns.AddFor(m => m.SourceFileBenCode);

        columns.AddFor(m => m.SourceFileClientName);

        columns.AddFor(m => m.BillingAppBenCode);

        columns.AddFor(m => m.BillingAppClientName);
        columns.AddFor(m => m.StartBillingDate);
        columns.AddFor(m => m.StartBillingDate);

        columns.AddFor(m => m.iNotExistInBillingAppTable);


    })
    .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.SourceFileBenCode).SummaryType(SummaryType.Count);
        })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)
							</div>
						</div>

					</div>
				</div>

			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
			</div>
		</div>
	</div>

</div>

<!--error-->
<!-- Button trigger modal -->
@*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalLong">
			Launch demo modal
	</button>*@

<!-- Modal -->
<div class="modal fade" id="displayErrors" tabindex="-1" role="dialog" aria-labelledby="displayErrorsTitle" aria-hidden="true">
	<div class="modal-dialog modal-xl" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="displayErrorsTitle">Display Errors</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				@*@foreach (var item in Model.ErrorList) {
					<div class="accordion" id="accordionExample">
							<div class="accordion-item">
									<h2 class="accordion-header" id="headingOne">
											<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
													@item.PackageName
											</button>
									</h2>
									<div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
											<div class="accordion-body">
													<strong>@item.ErrorCode</strong> @item.ErrorDescription.
											</div>
									</div>
							</div>*@
				@*<div class="accordion-item">
							<h2 class="accordion-header" id="headingTwo">
									<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
											Accordion Item #2
									</button>
							</h2>
							<div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
									<div class="accordion-body">
											<strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
									</div>
							</div>
					</div>*@

			</div>
			}


			////
			//commented
			@*@(Html.DevExtreme().DataGrid<FinanceBilling.Models.ErrorLogViewModels>()
				.DataSource(Model.ErrorList,"ID")
										.AllowColumnResizing(true)
				.ColumnMinWidth(50)
				.ColumnAutoWidth(true)
				.ShowBorders(true)
				.Columns(c => {
						c.Add().DataField("MachineName");
						c.Add().DataField("PackageName");
						c.Add().DataField("TaskName");
						c.Add().DataField("ErrorCode");
						c.Add().DataField("ErrorDescription");
										c.Add().DataField("Dated");
				})
										)*@
			@*@if (ViewData.Model?.ErrorList != null)
				{
								foreach (var errors in ViewData.Model.ErrorList)
								{
												<div><span>@errors.ErrorCode</span> : <span>@errors.MachineName</span></div>
												<div><span>@errors.ErrorDescription</span></div>
								}
				}*@
		</div>
		<div class="modal-footer">
			<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
		</div>
	</div>
</div>




<script>
	//$(function () {
	//	$("#accordionContainer").dxAccordion({
	//		dataSource: accordionData,
	//		itemTemplate: function (itemData, itemIndex, itemElement) {
	//			for (var field in itemData) {
	//				itemElement.append("<p>" + field + ": " + itemData[field] + "</p>");
	//			}
	//		}
	//	});
	//});


	$(document).ready(function () {
		var res = '@ViewBag.Message';
        var error = '@(Model.ErrorList!=null)';
		if (res == "File Uploaded Successfully") {
            $("#successModal").modal("show")
		}
        if (error =="True") {
		    $("#displayErrors").modal("show");
		}
    });

    $("#new-tab").click(function () {
        $("#new").addClass("show active")
        $("#new-tab").addClass("active")
        $("#existing").removeClass("show active")
        $("#terminated").removeClass("show active")
        $("#analytics").removeClass("show active")

        $("#existing-tab").removeClass("active")
        $("#terminated-tab").removeClass("active")
        $("#analytics-tab").removeClass("active")


    })
    $("#existing-tab").click(function () {
        $("#existing").addClass("show active")
        $("#existing-tab").addClass("active")
        $("#new").removeClass("show active")
        $("#terminated").removeClass("show active")
        $("#analytics").removeClass("show active")

        $("#new-tab").removeClass("active")
        $("#terminated-tab").removeClass("active")
        $("#analytics-tab").removeClass("active")


    })
    $("#terminated-tab").click(function () {
        $("#terminated").addClass("show active")
        $("#terminated-tab").addClass("active")
        $("#existing").removeClass("show active")
        $("#new").removeClass("show active")
        $("#analytics").removeClass("show active")

        $("#new-tab").removeClass("active")
        $("#existing-tab").removeClass("active")
        $("#analytics-tab").removeClass("active")


    })
    $("#analytics-tab").click(function () {
        $("#analytics").addClass("show active")
        $("#analytics-tab").addClass("show active")
        $("#terminated").removeClass("show active")
        $("#existing").removeClass("show active")
        $("#new").removeClass("show active")

        $("#new-tab").removeClass("show active")
        $("#existing-tab").removeClass("show active")
        $("#terminated-tab").removeClass("show active")
    })
    document.querySelectorAll(".drop-zone-input").forEach((inputElement) => {
        const dropZoneElement = inputElement.closest(".drop-zone");

        dropZoneElement.addEventListener("click", (e) => {
            inputElement.click();
        });

        inputElement.addEventListener("change", (e) => {
            if (inputElement.files.length) {
                updateThumbnail(dropZoneElement, inputElement.files.length);
                inputElement.files = e.dataTransfer.files;
            }
        });

        dropZoneElement.addEventListener("dragover", (e) => {
            e.preventDefault();
            dropZoneElement.classList.add("drop-zone--over");
        });

        ["dragleave", "dragend"].forEach((type) => {
            dropZoneElement.addEventListener(type, (e) => {
                dropZoneElement.classList.remove("drop-zone--over");
            });
        });

        dropZoneElement.addEventListener("drop", (e) => {
            e.preventDefault();

            if (e.dataTransfer.files.length) {
                inputElement.files = e.dataTransfer.files;
                updateThumbnail(dropZoneElement, e.dataTransfer.files.length);
            }
            dropZoneElement.classList.remove("drop-zone--over");
        });
    });


    function UploadeFiles() {
        var fileUpload = $("#file").get(0);
        var files = fileUpload.files;
        var data = new FormData();

        for (var i = 0; i < files.length; i++) {
            var fname = files[i].name;
            var re = /(\.doc|\.docx|\.csv|\.txt)$/i;
            if (!re.exec(fname)) {
                alert("File extension not supported!");
                return false;
            }
            else {
                data.append("Files", files[i]);
            }
        }
        $.ajax({
            xhr: function () {
                var xhr = new window.XMLHttpRequest();
                xhr.upload.addEventListener("progress", function (e) {
                    if (e.lengthComputable) {
                        var loaded = e.loaded;
                        var total = e.total;
                        var percent = Math.round((loaded / total) * 100);
                        $("#pb").attr("aria-valuenow", percent).css("width", percent + "%").text(percent + "%");
                    };

                });
                return xhr;
            },
            type: "post",
            url: "/UploadFIle/UploadFile",
            data: data,
            dataType: "json",
            contentType: false,
            processData: false,
            cache: false,
					success: function (ss) {
						debugger;
                alert(ss);
            }
        });
    };

    /**
     * Updates the thumbnail on a drop zone element.
     *
     *
     */


    function updateThumbnail(dropZoneElement, filelength) {
        let thumbnailElement = dropZoneElement.querySelector(".drop-zone__thumb");

        // First time - remove the prompt
        if (dropZoneElement.querySelector(".drop-zone-prompt")) {
            dropZoneElement.querySelector(".drop-zone-prompt").remove();
        }

        // First time - there is no thumbnail element, so lets create it
        if (!thumbnailElement) {
            thumbnailElement = document.createElement("div");
            thumbnailElement.classList.add("drop-zone__thumb");
            dropZoneElement.appendChild(thumbnailElement);
        }

        thumbnailElement.dataset.label = filelength + " Files Selected";


        thumbnailElement.style.backgroundImage = null;

    }


    function readURL(input) {
        var bt = document.getElementById('Upload');
        if (file.value != '') {
            bt.disabled = false;

        }
        else {
            bt.disabled = true;
        }


        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#Logo')
                    .attr('src', e.target.result)
                $('#Logo').css("visible:true;")
            };
            reader.readAsDataURL(input.files[0]);
            $('#Logo').attr("visibility", "false");

        }

    }



</script>
<style>
	.mytable tr > *:nth-child(1) {
		width: 15%;
	}

	.mytable tr > *:nth-child(2) {
		width: 70%;
	}

	.mytable tr > *:nth-child(3) {
		width: 15%;
	}

	#accordion-table {
		padding: 1rem 1.25rem;
		Height: 300px;
		overflow: scroll;
	}
</style>

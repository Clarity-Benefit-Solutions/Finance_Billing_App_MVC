@using Microsoft.AspNetCore.Http
@model UploadFile
@*@model FinanceBilling.Models.TblLoggingViewModel*@
@{

    ViewBag.Title = "Upload Files";


}

<div class="row" style="border:1px solid green">
    <div class="col-md-5">
        <div class="card text-center">


            <div class="card-header">
                Upload Files using below dropzone area
            </div>
            <div class="card-body text-center">
                <form method="post" enctype="multipart/form-data" asp-controller="UploadFile" asp-action="UploadFile">
                    <div class="form-group">
                        <div class="col-md-10">
                            <!--<div class="drop-zone d-flex justify-content-center align-items-center">-->
                            @*<img id="Logo" src="@logoImage" style="max-height:100%;max-width:100%;align-content:center;" />*@
                            <!--<span class="drop-zone-prompt">Drag and drop , Browse</span>-->
                            @*<div style="visibility:hidden;">*@
                            <!--<input asp-for="UploadedFiles" type="file" id="file" class="drop-zone-input" onchange="readURL(this);" multiple />-->
                            @*</div>*@
                            <!--</div>-->
                            <input type="file" asp-for="UploadedFiles" id="file" onchange="readURL(this);" multiple />
                            @*<input asp-for="UploadedFiles" multiple />*@
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-10">
                            <input class="btn btn-success" id="Upload" type="submit" disabled value="Upload" /><br />
                            <label id="msglabel" type="hidden">@ViewBag.Message</label>

                        </div>
                    </div>
                </form>
            </div>
            <div class="card-footer text-muted">

            </div>
        </div>


    </div>

    @if (ViewBag.missingFile != null)
    {
    <div class="col-md-5">
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })

        <div class="col-sm=12" style="padding-top: 11em; margin-left: 29px;">
            <span class="alert-heading"><b>Please upload missing files:-</b></span>
        </div>
        <div class="col-sm-12">
            <ul class="text-danger">
                @foreach (var modelSate in ViewBag.missingFile)
                    {
                <li>@modelSate.FileName</li>

                    }
            </ul>
        </div>
    </div>
    }
    else
    {
    <div class="col-md-5">
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    </div>
    }
</div>
<!-- Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <ul class="nav nav-tabs" id="myTab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active " id="new-tab" data-bs-toggle="tab" data-bs-target="#new" type="button" role="tab" aria-controls="new" aria-selected="true">New</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="existing-tab" data-bs-toggle="tab" data-bs-target="#existing" type="button" role="tab" aria-controls="existing" aria-selected="false">Existing</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="terminated-tab" data-bs-toggle="tab" data-bs-target="#terminated" type="button" role="tab" aria-controls="terminated" aria-selected="false">Terminated</button>
                    </li>
                    <li class="nav-item" role="analytics">
                        <button class="nav-link" id="analytics-tab" data-bs-toggle="tab" data-bs-target="#analytics" type="button" role="tab" aria-controls="analytics" aria-selected="false">Analytics</button>
                    </li>
                </ul>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="tab-content" id="myTabContent" style="width:100%;">
                    <div class="tab-pane fade show active" id="new" role="tabpanel" aria-labelledby="new-tab" style="overflow:auto; width:100%;">
                        
                        @(Html.DevExtreme().DataGrid<FinanceBilling.Models.NewClientViewModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Client")
        //.Key("ClientID")
        .LoadAction("NewClient")
    //.InsertAction("AddNewQuickBookClient")
    //.UpdateAction("UpdateQuickBookClient")
    //.DeleteAction("DeleteQuickBookClient")
    )
    .RemoteOperations(true)
    .Columns(columns => {


        columns.AddFor(m => m.ClientName);

        columns.AddFor(m => m.ClientGroupName);

        columns.AddFor(m => m.BillingStartDate);

        columns.AddFor(m => m.EIN);
        columns.AddFor(m => m.ClientDivisionName);
        columns.AddFor(m => m.ClientID);

        columns.AddFor(m => m.ClientDivisionID);

        columns.AddFor(m => m.Active);

        columns.AddFor(m => m.ClientAlternate);
        columns.AddFor(m => m.DeactivationDate);

        columns.AddFor(m => m.TPACode);

        columns.AddFor(m => m.Linetype);

        columns.AddFor(m => m.AccountTypeCode);
        columns.AddFor(m => m.DivisionName);
        columns.AddFor(m => m.PlanID);

    })
    .Editing(e => e
        .AllowAdding(false)
        .AllowUpdating(false)
        .AllowDeleting(false)
    )
)

                    </div>

                    <div class="tab-pane fade" id="existing" role="tabpanel" aria-labelledby="existing-tab" style="overflow:auto; width:100%;">
                       
                        @(Html.DevExtreme().DataGrid<FinanceBilling.Models.NewClientViewModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Client")
        .LoadAction("ExistingClient")
    )
    .RemoteOperations(true)
    .Columns(columns => {


        columns.AddFor(m => m.ClientName);

        columns.AddFor(m => m.ClientGroupName);

        columns.AddFor(m => m.BillingStartDate);

        columns.AddFor(m => m.EIN);
        columns.AddFor(m => m.ClientDivisionName);
        columns.AddFor(m => m.ClientID);

        columns.AddFor(m => m.ClientDivisionID);

        columns.AddFor(m => m.Active);

        columns.AddFor(m => m.ClientAlternate);
        columns.AddFor(m => m.DeactivationDate);

        columns.AddFor(m => m.TPACode);

        columns.AddFor(m => m.Linetype);

        columns.AddFor(m => m.AccountTypeCode);
        columns.AddFor(m => m.DivisionName);
        columns.AddFor(m => m.PlanID);

    })
    .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        //.HeaderFilter(f => f.Visible(true))
        //.GroupPanel(p => p.Visible(true))
        //.Grouping(g => g.AutoExpandAll(false))
        //.RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.ClientName).SummaryType(SummaryType.Count);
        })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    //.Editing(e => e
    //    .AllowAdding(false)
    //    .AllowUpdating(false)
    //    .AllowDeleting(false)


    //

    )
)
                    </div>
                    <div class="tab-pane fade" id="terminated" role="tabpanel" aria-labelledby="terminated-tab" style="overflow:auto; width:100%;">
                        
                        @(Html.DevExtreme().DataGrid<FinanceBilling.Models.TerminatedClient>()
    .DataSource(ds => ds.Mvc()
        .Controller("Client")
        .LoadAction("TerminatedClient")
    )
    .RemoteOperations(true)
    .Columns(columns => {


        columns.AddFor(m => m.ClientName);

        columns.AddFor(m => m.ClientGroupName);

        columns.AddFor(m => m.BillingStartDate);

        columns.AddFor(m => m.EIN);
        columns.AddFor(m => m.ClientDivisionName);
        columns.AddFor(m => m.ClientID);

        columns.AddFor(m => m.ClientDivisionID);

        columns.AddFor(m => m.Active);

        columns.AddFor(m => m.ClientAlternate);
        columns.AddFor(m => m.DeactivationDate);

        columns.AddFor(m => m.TPACode);

        columns.AddFor(m => m.Linetype);

        columns.AddFor(m => m.AccountTypeCode);
        columns.AddFor(m => m.MyProperty);
        columns.AddFor(m => m.PlanID);

    })
    .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        //.HeaderFilter(f => f.Visible(true))
        //.GroupPanel(p => p.Visible(true))
        //.Grouping(g => g.AutoExpandAll(false))
        //.RemoteOperations(true)
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.ClientName).SummaryType(SummaryType.Count);
        })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    //.Editing(e => e
    //    .AllowAdding(false)
    //    .AllowUpdating(false)
    //    .AllowDeleting(false)


    //

    )
)
                    </div>
                   
                    <div class="tab-pane fade" id="analytics" role="tabpanel" aria-labelledby="analytics-tab" style="overflow:auto; width:100%;">
                        <div class="container" style="overflow:auto; width:100%;float:left;">
                            <div class="col-md-6" style="overflow:auto; width:100% ;float:left;">
                                <h4 class="form-inline">Client To Product Comaprison</h4>
                               
                                @(Html.DevExtreme().DataGrid<FinanceBilling.Models.ClientToProductViewModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Analytics")
        .LoadAction("GetListClientProductComparison")
    )
    .RemoteOperations(true)
    .Columns(columns => {


        columns.AddFor(m => m.SourceFileBencode);

        columns.AddFor(m => m.SourceFileClientName);

        columns.AddFor(m => m.SourceFileProducts);

        columns.AddFor(m => m.BillingAppBenCode);
        columns.AddFor(m => m.BillingAppClientName);
        columns.AddFor(m => m.StartBillingDate);

        columns.AddFor(m => m.EndBillingDate);

        columns.AddFor(m => m.iNotExistInBillingAppTable);


    })
    .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.SourceFileBencode).SummaryType(SummaryType.Count);
        })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)
                            </div>
                            <div class="col-md-6" style="overflow:auto; width:100%;float:left;">
                                <h4 class="form-inline">Client To Client Comparison</h4>
                               
                                @(Html.DevExtreme().DataGrid<FinanceBilling.Models.ClientToClientViewModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Analytics")
        .LoadAction("GetListClientToClientComparison")
    )
    .RemoteOperations(true)
    .Columns(columns => {


        columns.AddFor(m => m.SourceFileBenCode);

        columns.AddFor(m => m.SourceFileClientName);

        columns.AddFor(m => m.BillingAppBenCode);

        columns.AddFor(m => m.BillingAppClientName);
        columns.AddFor(m => m.StartBillingDate);
        columns.AddFor(m => m.StartBillingDate);

        columns.AddFor(m => m.iNotExistInBillingAppTable);


    })
    .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .Summary(s => s
        .TotalItems(totalItems =>
        {
            totalItems.AddFor(m => m.SourceFileBenCode).SummaryType(SummaryType.Count);
        })
    .GroupItems(groupItems =>
    {
        groupItems.Add().SummaryType(SummaryType.Count);
    })
    )
)
                            </div>
                        </div>

                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>

</div>

<!--error-->
<!-- Button trigger modal -->
@*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalLong">
        Launch demo modal
    </button>*@

<!-- Modal -->
<div class="modal fade" id="displayErrors" tabindex="-1" role="dialog" aria-labelledby="displayErrorsTitle" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="displayErrorsTitle">Display Errors</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
						<div class="modal-body">
							@*@foreach (var item in Model.ErrorList) {
								<div class="accordion" id="accordionExample">
									<div class="accordion-item">
										<h2 class="accordion-header" id="headingOne">
											<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
												@item.PackageName
											</button>
										</h2>
										<div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
											<div class="accordion-body">
												<strong>@item.ErrorCode</strong> @item.ErrorDescription.
											</div>
										</div>
									</div>*@
									@*<div class="accordion-item">
										<h2 class="accordion-header" id="headingTwo">
											<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
												Accordion Item #2
											</button>
										</h2>
										<div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
											<div class="accordion-body">
												<strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
											</div>
										</div>
									</div>*@

								</div>
							}


							////
							@(Html.DevExtreme().DataGrid<FinanceBilling.Models.ErrorLogViewModels>()
    .DataSource(Model.ErrorList,"ID")
                .AllowColumnResizing(true)
    .ColumnMinWidth(50)
    .ColumnAutoWidth(true)
    .ShowBorders(true)
    .Columns(c => {
        c.Add().DataField("MachineName");
        c.Add().DataField("PackageName");
        c.Add().DataField("TaskName");
        c.Add().DataField("ErrorCode");
        c.Add().DataField("ErrorDescription");
                c.Add().DataField("Dated");
    })
                )
							@*@if (ViewData.Model?.ErrorList != null)
		{
				foreach (var errors in ViewData.Model.ErrorList)
				{
						<div><span>@errors.ErrorCode</span> : <span>@errors.MachineName</span></div>
						<div><span>@errors.ErrorDescription</span></div>
				}
		}*@
						</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
	$(function () {
		$("#accordionContainer").dxAccordion({
			dataSource: accordionData,
			itemTemplate: function (itemData, itemIndex, itemElement) {
				for (var field in itemData) {
					itemElement.append("<p>" + field + ": " + itemData[field] + "</p>");
				}
			}
		});
	});


	$(document).ready(function () {
		var res = '@ViewBag.Message';
		var error = '@(Model.ErrorList!=null)'
		if (res == "File Uploaded Successfully") {
            $("#successModal").modal("show")
		}
        if (error =="True") {
		    $("#displayErrors").modal("show");
		}
    });

    $("#new-tab").click(function () {
        $("#new").addClass("show active")
        $("#new-tab").addClass("active")
        $("#existing").removeClass("show active")
        $("#terminated").removeClass("show active")
        $("#analytics").removeClass("show active")

        $("#existing-tab").removeClass("active")
        $("#terminated-tab").removeClass("active")
        $("#analytics-tab").removeClass("active")


    })
    $("#existing-tab").click(function () {
        $("#existing").addClass("show active")
        $("#existing-tab").addClass("active")
        $("#new").removeClass("show active")
        $("#terminated").removeClass("show active")
        $("#analytics").removeClass("show active")

        $("#new-tab").removeClass("active")
        $("#terminated-tab").removeClass("active")
        $("#analytics-tab").removeClass("active")


    })
    $("#terminated-tab").click(function () {
        $("#terminated").addClass("show active")
        $("#terminated-tab").addClass("active")
        $("#existing").removeClass("show active")
        $("#new").removeClass("show active")
        $("#analytics").removeClass("show active")

        $("#new-tab").removeClass("active")
        $("#existing-tab").removeClass("active")
        $("#analytics-tab").removeClass("active")


    })
    $("#analytics-tab").click(function () {
        $("#analytics").addClass("show active")
        $("#analytics-tab").addClass("show active")
        $("#terminated").removeClass("show active")
        $("#existing").removeClass("show active")
        $("#new").removeClass("show active")

        $("#new-tab").removeClass("show active")
        $("#existing-tab").removeClass("show active")
        $("#terminated-tab").removeClass("show active")
    })
    document.querySelectorAll(".drop-zone-input").forEach((inputElement) => {
        const dropZoneElement = inputElement.closest(".drop-zone");

        dropZoneElement.addEventListener("click", (e) => {
            inputElement.click();
        });

        inputElement.addEventListener("change", (e) => {
            if (inputElement.files.length) {
                updateThumbnail(dropZoneElement, inputElement.files.length);
                inputElement.files = e.dataTransfer.files;
            }
        });

        dropZoneElement.addEventListener("dragover", (e) => {
            e.preventDefault();
            dropZoneElement.classList.add("drop-zone--over");
        });

        ["dragleave", "dragend"].forEach((type) => {
            dropZoneElement.addEventListener(type, (e) => {
                dropZoneElement.classList.remove("drop-zone--over");
            });
        });

        dropZoneElement.addEventListener("drop", (e) => {
            e.preventDefault();

            if (e.dataTransfer.files.length) {
                inputElement.files = e.dataTransfer.files;
                updateThumbnail(dropZoneElement, e.dataTransfer.files.length);
            }
            dropZoneElement.classList.remove("drop-zone--over");
        });
    });

    /**
     * Updates the thumbnail on a drop zone element.
     *
     *
     */
    function updateThumbnail(dropZoneElement, filelength) {
        let thumbnailElement = dropZoneElement.querySelector(".drop-zone__thumb");

        // First time - remove the prompt
        if (dropZoneElement.querySelector(".drop-zone-prompt")) {
            dropZoneElement.querySelector(".drop-zone-prompt").remove();
        }

        // First time - there is no thumbnail element, so lets create it
        if (!thumbnailElement) {
            thumbnailElement = document.createElement("div");
            thumbnailElement.classList.add("drop-zone__thumb");
            dropZoneElement.appendChild(thumbnailElement);
        }

        thumbnailElement.dataset.label = filelength + " Files Selected";


        thumbnailElement.style.backgroundImage = null;

    }


    function readURL(input) {
        var bt = document.getElementById('Upload');
        if (file.value != '') {
            bt.disabled = false;

        }
        else {
            bt.disabled = true;
        }


        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#Logo')
                    .attr('src', e.target.result)
                $('#Logo').css("visible:true;")
            };
            reader.readAsDataURL(input.files[0]);
            $('#Logo').attr("visibility", "false");

        }

    }



</script>

